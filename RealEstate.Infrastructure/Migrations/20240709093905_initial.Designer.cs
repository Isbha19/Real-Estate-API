// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using RealEstate.Infrastructure.Data;

#nullable disable

namespace RealEstate.Infrastructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20240709093905_initial")]
    partial class initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("RealEstate.Domain.Entities.AgentEntity.Agent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("About")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("LanguagesKnown")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nationality")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Specialization")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("isCompanyAdminVerified")
                        .HasColumnType("bit");

                    b.Property<string>("licenseNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("phoneNumber")
                        .HasColumnType("int");

                    b.Property<int>("whatsAppNumber")
                        .HasColumnType("int");

                    b.Property<int>("yearsOfExperience")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasFilter("[UserId] IS NOT NULL");

                    b.ToTable("Agents");
                });

            modelBuilder.Entity("RealEstate.Domain.Entities.AgentEntity.AgentImage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AgentId")
                        .HasColumnType("int");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PublicId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AgentId")
                        .IsUnique();

                    b.ToTable("AgentImage");
                });

            modelBuilder.Entity("RealEstate.Domain.Entities.CompanyEntity.BusinessActivityType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("businessActivityTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Real Estate Brokerage"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Property Management"
                        });
                });

            modelBuilder.Entity("RealEstate.Domain.Entities.CompanyEntity.Company", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BusinessActivityTypeId")
                        .HasColumnType("int");

                    b.Property<string>("BusinessDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyRegistrationDoc")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyRegistrationNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CompanyStructureId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("EmailAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LicenseNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NumberOfEmployees")
                        .HasColumnType("int");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RejectionReason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RepresentativeContactNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RepresentativeId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RepresentativePosition")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReraCertificateCopy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReraCertificateNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TenancyContract")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TradeLicenseCopy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TradeName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("VerificationStatus")
                        .HasColumnType("int");

                    b.Property<string>("WebsiteUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("isAdminVerified")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("BusinessActivityTypeId");

                    b.HasIndex("CompanyStructureId");

                    b.HasIndex("RepresentativeId")
                        .IsUnique()
                        .HasFilter("[RepresentativeId] IS NOT NULL");

                    b.ToTable("companies");
                });

            modelBuilder.Entity("RealEstate.Domain.Entities.CompanyEntity.CompanyFile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PublicId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId")
                        .IsUnique();

                    b.ToTable("CompanyFile");
                });

            modelBuilder.Entity("RealEstate.Domain.Entities.CompanyEntity.CompanyStructure", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("companyStructures");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Sole Proprietorship"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Limited Liability Company"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Civil Company"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Free Zone Establishment)"
                        });
                });

            modelBuilder.Entity("RealEstate.Domain.Entities.CompanyEntity.Plan", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Price")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Plan");

                    b.HasData(
                        new
                        {
                            Id = "p1",
                            Name = "Free Trial",
                            Price = 0
                        },
                        new
                        {
                            Id = "price_1PZ4m0GFthNCZxNOoti2pHeh",
                            Name = "Basic",
                            Price = 350
                        },
                        new
                        {
                            Id = "price_1PZ4mUGFthNCZxNOwjVLIVd6",
                            Name = "Premium",
                            Price = 700
                        });
                });

            modelBuilder.Entity("RealEstate.Domain.Entities.CompanyEntity.Subscription", b =>
                {
                    b.Property<int>("SubscriptionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SubscriptionId"));

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("PlanId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("StripeCustomerId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StripeSubscriptionId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("SubscriptionEndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("SubscriptionStartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("SubscriptionStatus")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SubscriptionId");

                    b.HasIndex("CompanyId")
                        .IsUnique();

                    b.HasIndex("PlanId");

                    b.ToTable("Subscription");
                });

            modelBuilder.Entity("RealEstate.Domain.Entities.Notification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("IsOpened")
                        .HasColumnType("bit");

                    b.Property<bool>("IsRead")
                        .HasColumnType("bit");

                    b.Property<string>("Message")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Url")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("RealEstate.Domain.Entities.PropertyEntity.Amenity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Amenities");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Central A/C"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Balcony"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Shared Spa"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Concierge Service"
                        },
                        new
                        {
                            Id = 5,
                            Name = "View of Water"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Pets Allowed"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Private Garden"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Private Gym"
                        },
                        new
                        {
                            Id = 9,
                            Name = "Built in Wardrobes"
                        },
                        new
                        {
                            Id = 10,
                            Name = "Built in Kitchen Appliances"
                        },
                        new
                        {
                            Id = 11,
                            Name = "Children's Play Area"
                        },
                        new
                        {
                            Id = 12,
                            Name = "Maids Room"
                        },
                        new
                        {
                            Id = 13,
                            Name = "Shared Pool"
                        },
                        new
                        {
                            Id = 14,
                            Name = "Shared Gym"
                        },
                        new
                        {
                            Id = 15,
                            Name = "Covered Parking"
                        },
                        new
                        {
                            Id = 16,
                            Name = "View of Landmark"
                        },
                        new
                        {
                            Id = 17,
                            Name = "Study"
                        },
                        new
                        {
                            Id = 18,
                            Name = "Private Pool"
                        },
                        new
                        {
                            Id = 19,
                            Name = "Private Jacuzzi"
                        },
                        new
                        {
                            Id = 20,
                            Name = "Walk-in Closet"
                        },
                        new
                        {
                            Id = 21,
                            Name = "Maid Service"
                        },
                        new
                        {
                            Id = 22,
                            Name = "Children's Pool"
                        },
                        new
                        {
                            Id = 23,
                            Name = "Barbecue Area"
                        });
                });

            modelBuilder.Entity("RealEstate.Domain.Entities.PropertyEntity.Facility", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Facilities");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "School"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Hospital"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Public Transport"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Shopping Mall"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Park"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Metro"
                        });
                });

            modelBuilder.Entity("RealEstate.Domain.Entities.PropertyEntity.FurnishingType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("FurnishingTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Furnished"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Unfurnished"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Partly Furnished"
                        });
                });

            modelBuilder.Entity("RealEstate.Domain.Entities.PropertyEntity.Image", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsPrimary")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastUpdatedBy")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("LastUpdatedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("PropertId")
                        .HasColumnType("int");

                    b.Property<int?>("PropertyId")
                        .HasColumnType("int");

                    b.Property<string>("PublicId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("PropertyId");

                    b.ToTable("Images");
                });

            modelBuilder.Entity("RealEstate.Domain.Entities.PropertyEntity.ListingType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ListingTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Rent"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Buy"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Commercial"
                        });
                });

            modelBuilder.Entity("RealEstate.Domain.Entities.PropertyEntity.Property", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AgentId")
                        .HasColumnType("int");

                    b.Property<DateOnly>("AvailabilityDate")
                        .HasColumnType("date");

                    b.Property<int>("Bathrooms")
                        .HasColumnType("int");

                    b.Property<int>("Bedrooms")
                        .HasColumnType("int");

                    b.Property<int>("FurnishingTypeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastUpdatedBy")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("LastUpdatedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("ListingTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("PostedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("Price")
                        .HasColumnType("int");

                    b.Property<string>("PropertyDescription")
                        .IsRequired()
                        .HasMaxLength(600)
                        .HasColumnType("nvarchar(600)");

                    b.Property<string>("PropertyTitle")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("PropertyTypeId")
                        .HasColumnType("int");

                    b.Property<int>("Size")
                        .HasColumnType("int");

                    b.Property<string>("VideoTourUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VirtualTourUrl")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AgentId");

                    b.HasIndex("FurnishingTypeId");

                    b.HasIndex("ListingTypeId");

                    b.HasIndex("PropertyTypeId");

                    b.ToTable("Properties");
                });

            modelBuilder.Entity("RealEstate.Domain.Entities.PropertyEntity.PropertyAmenties", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AmenityId")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastUpdatedBy")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("LastUpdatedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("PropertyId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AmenityId");

                    b.HasIndex("PropertyId");

                    b.ToTable("PropertyAmenties");
                });

            modelBuilder.Entity("RealEstate.Domain.Entities.PropertyEntity.PropertyNearByFacilities", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("FacilityId")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastUpdatedBy")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("LastUpdatedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("PropertyId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FacilityId");

                    b.HasIndex("PropertyId");

                    b.ToTable("PropertyNearByFacilities");
                });

            modelBuilder.Entity("RealEstate.Domain.Entities.PropertyEntity.PropertyType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("LastUpdatedBy")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("LastUpdatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("PropertyTypes");
                });

            modelBuilder.Entity("RealEstate.Domain.Entities.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("Provider")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("RealEstate.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("RealEstate.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RealEstate.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("RealEstate.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RealEstate.Domain.Entities.AgentEntity.Agent", b =>
                {
                    b.HasOne("RealEstate.Domain.Entities.CompanyEntity.Company", "company")
                        .WithMany("Agents")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RealEstate.Domain.Entities.User", "user")
                        .WithOne("Agent")
                        .HasForeignKey("RealEstate.Domain.Entities.AgentEntity.Agent", "UserId");

                    b.Navigation("company");

                    b.Navigation("user");
                });

            modelBuilder.Entity("RealEstate.Domain.Entities.AgentEntity.AgentImage", b =>
                {
                    b.HasOne("RealEstate.Domain.Entities.AgentEntity.Agent", "Agent")
                        .WithOne("ImageUrl")
                        .HasForeignKey("RealEstate.Domain.Entities.AgentEntity.AgentImage", "AgentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Agent");
                });

            modelBuilder.Entity("RealEstate.Domain.Entities.CompanyEntity.Company", b =>
                {
                    b.HasOne("RealEstate.Domain.Entities.CompanyEntity.BusinessActivityType", "BusinessActivityType")
                        .WithMany()
                        .HasForeignKey("BusinessActivityTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RealEstate.Domain.Entities.CompanyEntity.CompanyStructure", "CompanyStructure")
                        .WithMany()
                        .HasForeignKey("CompanyStructureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RealEstate.Domain.Entities.User", "Representative")
                        .WithOne("company")
                        .HasForeignKey("RealEstate.Domain.Entities.CompanyEntity.Company", "RepresentativeId");

                    b.Navigation("BusinessActivityType");

                    b.Navigation("CompanyStructure");

                    b.Navigation("Representative");
                });

            modelBuilder.Entity("RealEstate.Domain.Entities.CompanyEntity.CompanyFile", b =>
                {
                    b.HasOne("RealEstate.Domain.Entities.CompanyEntity.Company", "Company")
                        .WithOne("CompanyLogo")
                        .HasForeignKey("RealEstate.Domain.Entities.CompanyEntity.CompanyFile", "CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("RealEstate.Domain.Entities.CompanyEntity.Subscription", b =>
                {
                    b.HasOne("RealEstate.Domain.Entities.CompanyEntity.Company", "Company")
                        .WithOne("Subscription")
                        .HasForeignKey("RealEstate.Domain.Entities.CompanyEntity.Subscription", "CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RealEstate.Domain.Entities.CompanyEntity.Plan", "Plan")
                        .WithMany()
                        .HasForeignKey("PlanId");

                    b.Navigation("Company");

                    b.Navigation("Plan");
                });

            modelBuilder.Entity("RealEstate.Domain.Entities.Notification", b =>
                {
                    b.HasOne("RealEstate.Domain.Entities.User", "User")
                        .WithMany("Notifications")
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("RealEstate.Domain.Entities.PropertyEntity.Image", b =>
                {
                    b.HasOne("RealEstate.Domain.Entities.PropertyEntity.Property", "Property")
                        .WithMany("Images")
                        .HasForeignKey("PropertyId");

                    b.Navigation("Property");
                });

            modelBuilder.Entity("RealEstate.Domain.Entities.PropertyEntity.Property", b =>
                {
                    b.HasOne("RealEstate.Domain.Entities.AgentEntity.Agent", "Agent")
                        .WithMany("Properties")
                        .HasForeignKey("AgentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RealEstate.Domain.Entities.PropertyEntity.FurnishingType", "FurnishingType")
                        .WithMany()
                        .HasForeignKey("FurnishingTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RealEstate.Domain.Entities.PropertyEntity.ListingType", "ListingType")
                        .WithMany()
                        .HasForeignKey("ListingTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RealEstate.Domain.Entities.PropertyEntity.PropertyType", "PropertyType")
                        .WithMany()
                        .HasForeignKey("PropertyTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Agent");

                    b.Navigation("FurnishingType");

                    b.Navigation("ListingType");

                    b.Navigation("PropertyType");
                });

            modelBuilder.Entity("RealEstate.Domain.Entities.PropertyEntity.PropertyAmenties", b =>
                {
                    b.HasOne("RealEstate.Domain.Entities.PropertyEntity.Amenity", "Amenity")
                        .WithMany("PropertyAmenities")
                        .HasForeignKey("AmenityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RealEstate.Domain.Entities.PropertyEntity.Property", "Property")
                        .WithMany("PropertyAmenties")
                        .HasForeignKey("PropertyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Amenity");

                    b.Navigation("Property");
                });

            modelBuilder.Entity("RealEstate.Domain.Entities.PropertyEntity.PropertyNearByFacilities", b =>
                {
                    b.HasOne("RealEstate.Domain.Entities.PropertyEntity.Facility", "Facility")
                        .WithMany("PropertyNearByFacilities")
                        .HasForeignKey("FacilityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RealEstate.Domain.Entities.PropertyEntity.Property", "Property")
                        .WithMany("PropertyNearByFacilities")
                        .HasForeignKey("PropertyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Facility");

                    b.Navigation("Property");
                });

            modelBuilder.Entity("RealEstate.Domain.Entities.AgentEntity.Agent", b =>
                {
                    b.Navigation("ImageUrl");

                    b.Navigation("Properties");
                });

            modelBuilder.Entity("RealEstate.Domain.Entities.CompanyEntity.Company", b =>
                {
                    b.Navigation("Agents");

                    b.Navigation("CompanyLogo");

                    b.Navigation("Subscription");
                });

            modelBuilder.Entity("RealEstate.Domain.Entities.PropertyEntity.Amenity", b =>
                {
                    b.Navigation("PropertyAmenities");
                });

            modelBuilder.Entity("RealEstate.Domain.Entities.PropertyEntity.Facility", b =>
                {
                    b.Navigation("PropertyNearByFacilities");
                });

            modelBuilder.Entity("RealEstate.Domain.Entities.PropertyEntity.Property", b =>
                {
                    b.Navigation("Images");

                    b.Navigation("PropertyAmenties");

                    b.Navigation("PropertyNearByFacilities");
                });

            modelBuilder.Entity("RealEstate.Domain.Entities.User", b =>
                {
                    b.Navigation("Agent");

                    b.Navigation("Notifications");

                    b.Navigation("company");
                });
#pragma warning restore 612, 618
        }
    }
}
